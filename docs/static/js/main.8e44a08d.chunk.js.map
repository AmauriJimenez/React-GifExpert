{"version":3,"sources":["components/AddAnime.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddAnime","setAnimes","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","anime","type","value","onChange","console","log","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","setAnime","animes","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAW,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAiBvC,OACI,0BAAMC,SAXU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAU,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACnCN,EAAc,OASd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SArBQ,SAACP,GACjBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,Y,uBCFlBK,EAAO,uCAAG,WAAOP,GAAP,uBAAAQ,EAAA,6DACbC,EADa,wCAJX,SAIW,cACmCC,UAAUV,GAD7C,kBAHR,GAGQ,oBALP,oCAKO,SAEAW,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCHPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCHHO,EAAU,SAAC,GAAe,IAAb1B,EAAY,EAAZA,MAAY,ECDV,SAACA,GAAW,IAAD,EAETR,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJsB,mBAE5BC,EAF4B,KAErBC,EAFqB,KAmBnC,OAZAC,qBAAU,WACNvB,EAAQP,GACH+B,MAAK,SAAAX,GAEFS,EAAS,CACLf,KAAMM,EACNO,SAAS,SAItB,CAAC3B,IAEG4B,EDhB2BI,CAAahC,GAAjCoB,EAFoB,EAE1BN,KAAca,EAFY,EAEZA,QAEtB,OACI,oCACI,wBAAIJ,UAAU,qCAAqCvB,GAClD2B,GAAW,uBAAGJ,UAAU,oCAAb,YACX,yBAAKA,UAAU,aACZ,4BAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIgB,IAAKhB,EAAIC,IACLD,WEdvBiB,EAAe,SAAC,GAAiB,EAAfC,SAAgB,IAAD,EAGd3C,mBAAS,CAAC,cAHI,mBAGnC4C,EAHmC,KAG3B7C,EAH2B,KAS1C,OACI,oCACI,4CACA,kBAAC,EAAD,CAAUA,UAAWA,IACrB,6BACA,4BACK6C,EAAOpB,KAAI,SAAChB,GAAD,OACR,kBAAC,EAAD,CACIiC,IAAKjC,EACLA,MAAOA,UChB/BqC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.8e44a08d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddAnime = ({ setAnimes }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const inputChange = (e) => {\r\n        console.log(e.target.value);\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const inputSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 1) {\r\n            setAnimes(anime => [inputValue, ...anime]);\r\n            setInputValue('');\r\n        }\r\n        //console.log('enviado');\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={inputSubmit}>\r\n\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={inputChange} />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddAnime.propTypes = {\r\n    setAnimes: PropTypes.func.isRequired\r\n}\r\n","const api_KEY = 'qoqWdUBHBwJFGa5ffzb9DeRYBFDU2esh';\r\nconst api = 'search';\r\nconst limite = 10;\r\n\r\n\r\nexport const getGifs = async (anime) => {\r\n    const url = `https://api.giphy.com/v1/gifs/${api}?q=${encodeURI(anime)}&limit=${limite}&api_key=${api_KEY}`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    //console.log(url);\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    //console.log(gifs);\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    //console.log({ id, title, url });\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ anime }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(anime);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{anime}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando</p>}\r\n            {<div className=\"card-grid\">\r\n                <ol>\r\n                    {\r\n                        images.map(img => (\r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img} />\r\n                        ))\r\n                    }\r\n                </ol>\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (anime) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(anime)\r\n            .then(images => {\r\n\r\n                setState({\r\n                    data: images,\r\n                    loading: false\r\n                });\r\n\r\n            });\r\n    }, [anime]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddAnime } from './components/AddAnime';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ({ setAnime }) => {\r\n\r\n    //const animes = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [animes, setAnimes] = useState(['One Punch']);\r\n\r\n    // const agregarAnime = () => {\r\n    //     setAnimes([...animes, 'Capitan Tsubasa']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddAnime setAnimes={setAnimes} />\r\n            <hr />\r\n            <ol>\r\n                {animes.map((anime) =>\r\n                    <GifGrid\r\n                        key={anime}\r\n                        anime={anime}\r\n                    />\r\n                )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}